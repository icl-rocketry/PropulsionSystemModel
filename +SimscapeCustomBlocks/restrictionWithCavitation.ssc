component restrictionWithCavitation
% Restriction With Cavitation
% This models a restriction in a two phase network with a resistance
% specified from it's flow coefficient (In Imperial units - Cv).
%
% Two different models are used: The first model is for a mostly liquid flow where
% flow rate is computed as the liquid flow rate, with choking condition given by cavitation.
% Uses equations from https://www.controlglobal.com/assets/Media/MediaManager/RefBook_Cashco_Fluid.pdf
% 
% The second model used calculates the flow rate using a compressible gas relation, with choking condition
% given by sonic conditions. (Controlled by input x_T pressure drop ratio factor signal). 
% Equations from https://www.valin.com/resources/blog/gas-flow-control-valves
%
% The two models are blended between smoothly between the vapor quality thresholds specified. Both models
% assume the throttling process is adiabatic
%
% More about gas flow and x_T pressure drop ratio factor: 
% https://www.valin.com/resources/blog/gas-flow-control-valves
% and also:
% http://integrated.cc/cse/ISA_750101_SPBd.pdf

nodes
    A = foundation.two_phase_fluid.two_phase_fluid; % A:left
    B = foundation.two_phase_fluid.two_phase_fluid; % B:right
    Props = SimscapeCustomBlocks.customFluidDomain.extra_two_phase_fluid_props;
end

annotations
    A : Side = left;
    B : Side = right;
    Props : Side = top;
end

inputs
    % Flow coefficient (C_v, Imperial Units. Assumed is for water)
    Cv = 10; % Cv:left
    % Threshold Choked Pressure Drop Ratio Factor for compressible flow calculation - Varies for valve type and open-amt (=dP_Choked/P1)
    x_T = 0.2; %x_T:left
end

parameters
    area             = {0.01, 'm^2'}; % Cross-sectional area at ports A and B
    %Should perhaps change to input as should vary with how open valve is (p31 of ISA_750101_SPBd.pdf)
    F_L = 0.45; % Liquid Pressure Recovery Factor (F_L, Approx 0.45 for ball valves)
    F_d = 1; % Valve style modifier for turbulence threshold (F_d)
    X_liquid_threshold = 0.6; %Vapor quality below which is modelled as liquid with cavitation/flashing choke condition
    X_gas_theshold = 0.9; %Vapor quality above which is modelled as compressible gas with sonic choke condition
end

% Parameter checks
equations
    assert(Cv >= 0)
end

variables (Access=protected)
    mdot_A = {0, 'kg/s'}; % Mass flow rate into port A
    mdot_B = {0, 'kg/s'}; % Mass flow rate into port B
    Phi_A  = {0, 'kW'  }; % Energy flow rate into port A
    Phi_B  = {0, 'kW'  }; % Energy flow rate into port B
end

variables (Access=protected, ExternalAccess=none)
    u_A        = {value={1500, 'kJ/kg' }, priority=priority.none}; % Specific internal energy at port A
    u_B        = {value={1500, 'kJ/kg' }, priority=priority.none}; % Specific internal energy at port B
end

branches
    mdot_A : A.mdot -> *;
    mdot_B : B.mdot -> *;
    Phi_A  : A.Phi  -> *;
    Phi_B  : B.Phi  -> *;
end

equations
    let
        % Port pressure
        p_A = A.p;
        p_B = B.p;

        % Normalized internal energy
        unorm_A = foundation.two_phase_fluid.normalized_internal_energy(u_A, p_A, ...
            A.u_min, A.u_max, A.p_TLU, A.u_sat_liq_TLU, A.u_sat_vap_TLU);
        unorm_B = foundation.two_phase_fluid.normalized_internal_energy(u_B, p_B, ...
            A.u_min, A.u_max, A.p_TLU, A.u_sat_liq_TLU, A.u_sat_vap_TLU);
        
        % Specific volume
        v_A = tablelookup(A.unorm_TLU, A.p_TLU, A.v_TLU, unorm_A, p_A, interpolation=smooth, extrapolation=linear);
        v_B = tablelookup(A.unorm_TLU, A.p_TLU, A.v_TLU, unorm_B, p_B, interpolation=smooth, extrapolation=linear);
        
        % Inlet and outlet pressure, unorm and specific volumes
        [p_in, unorm_in, v_in, unorm_out, v_out, dP, direction, u_in, u_out] = ...
            if ge(p_A, p_B), ...
                p_A; ...
                unorm_A; ...
                v_A; ...
                unorm_B; ...
                v_B; ...
                p_A - p_B; ...
                1; ...
                u_A; ...
                u_B
            else ...
                p_B; ...
                unorm_B; ...
                v_B; ...
                unorm_A; ...
                v_A; ...
                p_B - p_A; ...
                -1; ...
                u_B; ...
                u_A
            end;
            
        vapor_quality_in = ...
            if lt(p_in, A.p_crit), ...
                simscape.function.limit(unorm_in, 0, 1, false)
            else ...
                    -1
            end;
        
        %Temp at inlet and outlet
        T_in = tablelookup(A.unorm_TLU, A.p_TLU, A.T_TLU, unorm_A, p_in, interpolation=smooth, extrapolation=linear);
        
        %Specific heats at inlet
        Cp_in = tablelookup(Props.unorm_TLU, Props.p_TLU, Props.Cp_TLU, unorm_A, p_in, interpolation=smooth, extrapolation=linear);
        Cv_in = tablelookup(Props.unorm_TLU, Props.p_TLU, Props.Cv_TLU, unorm_A, p_in, interpolation=smooth, extrapolation=linear);
        specificHeatRatio = max(Cp_in / Cv_in, 0.1); %Approximately right, but notable error due to okay-ish Cp and meh Cv values
        
        %Vapor pressure for temp as at inlet
        P_Vap_in = tablelookup(Props.unorm_TLU, Props.p_TLU, Props.PVap_TLU, unorm_A, p_in, interpolation=smooth, extrapolation=linear);
        
        %Kinematic viscosity at inlet
        nu_in = tablelookup(A.unorm_TLU, A.p_TLU, A.nu_TLU, unorm_A, p_in, interpolation=smooth, extrapolation=linear);
        
        %Inlet specific gravity (rho/rho_water)
        rho_water = {997, 'kg/m^3'};
        specific_gravity = 1 / (rho_water * v_in);
        
        % Liquid, non choked, turbulent
        volumetric_flow_rate_non_choked_turb = {0.000277778 * 0.865 * Cv * (value(dP, 'bar')/specific_gravity)^0.5, 'm^3/s'};
        
        % Valve Reynolds Number, pretty much ALWAYS turbulent...
        %Assume flow rate approx that of turbulent case for calculation of N_Rev (approximation)
        N_Rev = (273.76 * F_d * value(volumetric_flow_rate_non_choked_turb, 'm^3/s')) / (value(nu_in,'m^2/s') * (max(Cv,1e-6) * F_L)^0.5 );
        
        valveReynoldsFactorPolynomialCoeffs = [3.16850064363529e-09	-1.11330402840485e-07	1.27828631540423e-06	-2.44149541833513e-06	-5.29569390172417e-05	0.000290700310164281	0.000639895516939893	-0.00729720095432149	-0.0162996255586932	0.544909856098589	-2.79435940651948];
        %Valve Reynolds Number Factor (Pretty much always 1)
        F_R = ...
            if ge(N_Rev, 40e3), ...
                1
            elseif lt(N_Rev, 0.010401453145693925), ...
                0.005223345074266849
            else ...
                min(1, exp(log( valveReynoldsFactorPolynomialCoeffs(1)*N_Rev^10 ...
                + valveReynoldsFactorPolynomialCoeffs(2)*N_Rev^9 ...
                + valveReynoldsFactorPolynomialCoeffs(3)*N_Rev^8 ...
                + valveReynoldsFactorPolynomialCoeffs(4)*N_Rev^7 ...
                + valveReynoldsFactorPolynomialCoeffs(5)*N_Rev^6 ...
                + valveReynoldsFactorPolynomialCoeffs(6)*N_Rev^5 ...
                + valveReynoldsFactorPolynomialCoeffs(7)*N_Rev^4 ...
                + valveReynoldsFactorPolynomialCoeffs(8)*N_Rev^3 ...
                + valveReynoldsFactorPolynomialCoeffs(9)*N_Rev^2 ...
                + valveReynoldsFactorPolynomialCoeffs(10)*N_Rev^1 ...
                + valveReynoldsFactorPolynomialCoeffs(11) ...
            )))
            end;
        
        % Liquid, non choked
        volumetric_flow_rate_non_choked = F_R * volumetric_flow_rate_non_choked_turb;
        
        % Mass flow rate
        mdotUnchokedVal = direction * (volumetric_flow_rate_non_choked / v_in);
        
        %Liquid Critical Pressure Ratio Factor
        F_f = 0.96 - 0.28 * (P_Vap_in / A.p_crit)^0.5;
        
        %Choked vena contracta min pressure
        P_vc = F_f * P_Vap_in;
        
        %"dP allow" - Above this dP full cavitation choking occurs
        dPChokeThreshold = F_L^2 * (p_in - P_vc);
        %Above this dP partial cavitation occurs (When non choked vena contracta pressure is equal to vapor pressure)
        dPChokeIncipient = F_L^2 * (p_in - P_Vap_in);
        
        %Liquid turbulent flow, choked
        dPChoked = abs(p_in - P_vc);
        volumetric_flow_rate_choked = min(volumetric_flow_rate_non_choked, {0.000277778 * 0.865 * Cv * F_L * (value(dPChoked, 'bar')/specific_gravity)^0.5, 'm^3/s'});
        
        %Mass flow rate for choked liquid
        mdotChokedVal = direction * (volumetric_flow_rate_choked / v_in);
        
        %Mass flow rate for liquid, blending between unchoked and choked as needed
        %NOT appropriate for gas phase...
        mdotLiq = simscape.function.blend(mdotUnchokedVal, mdotChokedVal, max(0, dPChokeIncipient), max({1e-8,'bar'},dPChokeThreshold), dP);
    
        %Compressible gas flow rate (with choking) using eqn 9 (ISA_750101_SPBd.pdf)
        pressureDropRatio = dP/p_in; %'x'
        %Specific heat ratio factor
        F_k = specificHeatRatio / 1.4; %Relative to air
        pressureDropRatioMax = F_k * x_T;
        Y = 1 - min(pressureDropRatio, pressureDropRatioMax)/(3*F_k*max(x_T, 1e-9)); %"Expansion factor"
        mdotCompressible = {Cv * 0.00075833333 * Y * (min(pressureDropRatio, pressureDropRatioMax) * value(p_in, 'kPa') * value(v_in, 'm^3/kg')^-1)^0.5, 'kg/s'};
        
        %Blend between liquid with cavitation and compressible gas flow rate predictions between chosen thresholds
        mdot = simscape.function.blend(mdotLiq, mdotCompressible, X_liquid_threshold, X_gas_theshold, vapor_quality_in);
        
        %Velocity at A,B
        velocity_A = (mdot * v_A) / area;
        velocity_B = (mdot * v_B) / area;
    in
        % Mass flow rate
        mdot_A == mdot;
        
        % Pick specific internal energy such that process is adiabatic
        u_A + p_A*v_A + velocity_A^2/2 == u_B + p_B*v_B + velocity_B^2/2;
        
        convection_A.ht_I == u_A + p_A*v_A + velocity_A^2/2;
        
        % Mass balance
        mdot_A + mdot_B == 0;

        % Energy balance
        Phi_A + Phi_B == 0;

        % Run-time variable checks
        assert(A.p >= A.p_min, message('physmod:simscape:library:two_phase_fluid:PressureMinValid', 'A'))
        assert(A.p <= A.p_max, message('physmod:simscape:library:two_phase_fluid:PressureMaxValid', 'A'))
        assert(A.u >= A.u_min, message('physmod:simscape:library:two_phase_fluid:InternalEnergyMinValid', 'A'))
        assert(A.u <= A.u_max, message('physmod:simscape:library:two_phase_fluid:InternalEnergyMaxValid', 'A'))
        assert(B.p >= B.p_min, message('physmod:simscape:library:two_phase_fluid:PressureMinValid', 'B'))
        assert(B.p <= B.p_max, message('physmod:simscape:library:two_phase_fluid:PressureMaxValid', 'B'))
        assert(B.u >= B.u_min, message('physmod:simscape:library:two_phase_fluid:InternalEnergyMinValid', 'B'))
        assert(B.u <= B.u_max, message('physmod:simscape:library:two_phase_fluid:InternalEnergyMaxValid', 'B'))

        % Equate variables for internal components that calculate energy convection at ports A and B
        convection_A.mdot == mdot_A;
        convection_A.Phi  == Phi_A;
        convection_B.mdot == mdot_B;
        convection_B.Phi  == Phi_B;

        convection_A.ht_I == convection_B.ht_I;
    end
end

% Internal components that calculate energy convection at ports A and B
components (ExternalAccess=none)
    convection_A = foundation.two_phase_fluid.port_convection(flow_area = area, length_scale = sqrt(4*area/pi));
    convection_B = foundation.two_phase_fluid.port_convection(flow_area = area, length_scale = sqrt(4*area/pi));
end

connections
    connect(A, convection_A.port)
    connect(B, convection_B.port)
end

end